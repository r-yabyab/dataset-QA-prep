{"type": "function_declaration", "start_line": 14, "end_line": 269, "start_char": 457, "end_char": 7641, "text": "function GameBoardComponent() {\n\n  const clientRef = useRef(null);\n\n  const [board, setBoard] = useState([])\n\n  // const [tracking, setTracking] = useState(null);\n  const [tracking, setTracking] = useState({\n    initialCell: null,\n    targetCell: null,\n    count: 0,\n  });\n\n  const [fruitsMatched, setFruitsMatched] = useState(0)\n  const [flash, setFlash] = useState(false)\n      // 0 = not started, 1 = started, 2 = ended, 3 = preStart\n      // private int gameState;\n  const [gameState, setGameState] = useState(0)\n  const [game, setGame] = useState({\n    gameState: 0,\n    score: null,\n    timer: null\n  });\n  const [startGameState, setStartGameState] = useState(false)\n  // const [isGameActive, setIsGameActive] = useState(false)\n  const [gameEndTime, setGameEndTime] = useState(null);\n  // const [timeLeft, setTimeLeft] = useState(0);\n  const [preStart, setPreStart] = useState(\"New\")\n\n  const [volume, setVolume] = useState(0.25)\n\n  useEffect(() => {\n    if (tracking.count > 0) {\n      // Trigger the flash effect\n      setFlash(true);\n      // Remove the flash effect after 1 second\n      const timer = setTimeout(() => {\n        setFlash(false);\n      }, 200);\n\n      return () => clearTimeout(timer); // Clean up the timer\n    }\n  }, [tracking.count]);\n\n  // useEffect(() => {\n  //   if (game.gameState == 1 && gameEndTime) {\n  //     // Set initial time left\n  //     setTimeLeft(Math.max(Math.floor((gameEndTime - Date.now()) / 1000), 0));\n\n  //     // Update the countdown every second\n  //     const intervalId = setInterval(() => {\n  //       const remainingTime = Math.max(Math.floor((gameEndTime - Date.now()) / 1000), 0);\n  //       setTimeLeft(remainingTime);\n\n  //       if (remainingTime <= 0) {\n  //         clearInterval(intervalId);\n  //         endGame();\n  //       }\n  //     }, 1000);\n\n  //     // Clear interval on component unmount\n  //     return () => clearInterval(intervalId);\n  //   }\n  // }, [game.gameState, gameEndTime]);\n\n  const startGame = () => {\n    // setPreStart(\"Ready\")\n\n\n    // setTimeout(() =>{\n    //   setGameState(1);\n    //   const endTime = Date.now() + 10000; // Set the end time to 60 seconds from now\n    //   setGameEndTime(endTime);\n    //   setPreStart(\"Playing\")\n    // }, 1000)\n\n    setGame({\n      gameState: 3\n    })\n    console.log(startGameState)\n    // setTimeout(() => {\n    //   setStartGameState(false)\n    //   console.log(startGameState)\n    // }, 500)\n\n  };\n\n  const endGame = () => {\n    setGameState(2);\n    setGameEndTime(null);\n    setPreStart(\"Done\")\n  };\n\n  const connectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'begin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  const reConnectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'rejoin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  return (\n<>\n\n{/* <div className=\" bg-blue-500\">App.js</div> */}\n\n      <div>\n        {/* {gameState == 1 ? `Time Left: ${timeLeft} seconds` : 'Game Over'} */}\n      </div>\n\n      <div className=\" flex flex-col absolute -translate-x-1/2 left-1/2 bg-white p-3 rounded-lg\">\n        <Score fruitsMatched={fruitsMatched} />\n        <GameHelper />\n        <div className=\"w-[98%] ml-1 mb-1\">\n        <CountdownTimer\n          game={game}\n          clientRef={clientRef}\n        />\n        </div>\n        <div className=\"\">\n        <Board\n          rows={BoardOptions.BOARD_ROWS}\n          cols={BoardOptions.BOARD_COLUMNS}\n          setTracking={setTracking}\n          setFruitsMatched={setFruitsMatched}\n          gameState={game.gameState}\n          volume={volume}\n          board={board}\n          setBoard={setBoard}\n          clientRef={clientRef}\n        />\n        </div>\n\n        <div className=\"absolute text-8xl  bg-zinc-200 top-1/2 -translate-y-[50%] 0\">\n          {preStart === \"Ready\" && \"Ready?\"}\n          <WebSocketClient\n            game={game}\n            setGame={setGame}\n            startGameState={startGameState}\n            connectToGame={connectToGame}\n            reConnectToGame={reConnectToGame}\n            clientRef={clientRef}\n            board={board}\n            setBoard={setBoard}\n          />\n          {/* <div onClick={startGame} className=\"hover:cursor-pointer hover:bg-green-400\">{preStart === \"New\" && \"Start game\"}</div> */}\n          {preStart === \"Done\" && \"Game Over\"}\n        </div>\n      </div>\n\n\n      <div>\n        <div className=\"flex-col\">\n          <div>tracking:</div>\n          <div>Initial {tracking.initialCell}</div>\n          <div>Target {tracking.targetCell}</div>\n        </div>\n        <div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}>Matches: {tracking.count}</div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}># of fruits matched: {fruitsMatched}</div>\n\n        </div>\n      </div>\n\n\n      <div>\n        {game.gameState == 0 || game.gameState == 2 && (\n          <button onClick={startGame}>Start Game</button>\n        )\n        }\n      </div>\n\n      <div>\n        <Volume setVolume={setVolume} volume={volume} />\n      </div>\n\n      {game ? (\n        <div>\n          <div className='font-bold'>Websocket Data From Spring Boot:</div>\n          <div>\n            <h1>Game State: {game.gameState}</h1>\n            <p>Timer: {game.timer}</p>\n            <p>Score: {game.score}</p>\n          </div>\n        </div>\n      ) : (\n        <p>Waiting for game data...</p>\n      )}\n\n\n\n    </>\n  );\n}", "name": "GameBoardComponent"}
{"type": "arrow_function", "start_line": 45, "end_line": 56, "start_char": 1406, "end_char": 1699, "text": "() => {\n    if (tracking.count > 0) {\n      // Trigger the flash effect\n      setFlash(true);\n      // Remove the flash effect after 1 second\n      const timer = setTimeout(() => {\n        setFlash(false);\n      }, 200);\n\n      return () => clearTimeout(timer); // Clean up the timer\n    }\n  }", "name": "anonymous"}
{"type": "arrow_function", "start_line": 50, "end_line": 52, "start_char": 1579, "end_char": 1619, "text": "() => {\n        setFlash(false);\n      }", "name": "anonymous"}
{"type": "arrow_function", "start_line": 54, "end_line": 54, "start_char": 1641, "end_char": 1666, "text": "() => clearTimeout(timer)", "name": "anonymous"}
{"type": "arrow_function", "start_line": 79, "end_line": 99, "start_char": 2438, "end_char": 2886, "text": "() => {\n    // setPreStart(\"Ready\")\n\n\n    // setTimeout(() =>{\n    //   setGameState(1);\n    //   const endTime = Date.now() + 10000; // Set the end time to 60 seconds from now\n    //   setGameEndTime(endTime);\n    //   setPreStart(\"Playing\")\n    // }, 1000)\n\n    setGame({\n      gameState: 3\n    })\n    console.log(startGameState)\n    // setTimeout(() => {\n    //   setStartGameState(false)\n    //   console.log(startGameState)\n    // }, 500)\n\n  }", "name": "startGame"}
{"type": "arrow_function", "start_line": 101, "end_line": 105, "start_char": 2907, "end_char": 2989, "text": "() => {\n    setGameState(2);\n    setGameEndTime(null);\n    setPreStart(\"Done\")\n  }", "name": "endGame"}
{"type": "arrow_function", "start_line": 107, "end_line": 140, "start_char": 3016, "end_char": 4018, "text": "() => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'begin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }", "name": "connectToGame"}
{"type": "arrow_function", "start_line": 111, "end_line": 126, "start_char": 3170, "end_char": 3695, "text": "() => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'begin',\n        });\n      }", "name": "onConnect"}
{"type": "arrow_function", "start_line": 115, "end_line": 119, "start_char": 3318, "end_char": 3468, "text": "(message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        }", "name": "anonymous"}
{"type": "arrow_function", "start_line": 127, "end_line": 130, "start_char": 3717, "end_char": 3874, "text": "(frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      }", "name": "onStompError"}
{"type": "arrow_function", "start_line": 137, "end_line": 139, "start_char": 3973, "end_char": 4013, "text": "() => {\n      client.deactivate();\n    }", "name": "anonymous"}
{"type": "arrow_function", "start_line": 142, "end_line": 175, "start_char": 4046, "end_char": 5049, "text": "() => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'rejoin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }", "name": "reConnectToGame"}
{"type": "arrow_function", "start_line": 146, "end_line": 161, "start_char": 4200, "end_char": 4726, "text": "() => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'rejoin',\n        });\n      }", "name": "onConnect"}
{"type": "arrow_function", "start_line": 150, "end_line": 154, "start_char": 4348, "end_char": 4498, "text": "(message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        }", "name": "anonymous"}
{"type": "arrow_function", "start_line": 162, "end_line": 165, "start_char": 4748, "end_char": 4905, "text": "(frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      }", "name": "onStompError"}
{"type": "arrow_function", "start_line": 172, "end_line": 174, "start_char": 5004, "end_char": 5044, "text": "() => {\n      client.deactivate();\n    }", "name": "anonymous"}
