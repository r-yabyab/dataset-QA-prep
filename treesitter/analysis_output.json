{
  "file_path": "W:\\Users\\cayab\\dataset-QA-prep\\data\\simple\\GameBoardComponent.js",
  "file_name": "GameBoardComponent.js",
  "codesearchnet_format": {
    "total_functions": 1,
    "functions_under_500_tokens": 0,
    "functions": [
      {
        "name": "GameBoardComponent",
        "code": "function GameBoardComponent() {\n\n  const clientRef = useRef(null);\n\n  const [board, setBoard] = useState([])\n\n\n  const [tracking, setTracking] = useState({\n    initialCell: null,\n    targetCell: null,\n    count: 0,\n  });\n\n  const [fruitsMatched, setFruitsMatched] = useState(0)\n  const [flash, setFlash] = useState(false)\n\n\n  const [gameState, setGameState] = useState(0)\n  const [game, setGame] = useState({\n    gameState: 0,\n    score: null,\n    timer: null\n  });\n  const [startGameState, setStartGameState] = useState(false)\n\n  const [gameEndTime, setGameEndTime] = useState(null);\n\n  const [preStart, setPreStart] = useState(\"New\")\n\n  const [volume, setVolume] = useState(0.25)\n\n  useEffect(() => {\n    if (tracking.count > 0) {\n\n      setFlash(true);\n\n      const timer = setTimeout(() => {\n        setFlash(false);\n      }, 200);\n\n      return () => clearTimeout(timer);\n    }\n  }, [tracking.count]);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const startGame = () => {\n\n\n\n\n\n\n\n\n\n\n    setGame({\n      gameState: 3\n    })\n    console.log(startGameState)\n\n\n\n\n\n  };\n\n  const endGame = () => {\n    setGameState(2);\n    setGameEndTime(null);\n    setPreStart(\"Done\")\n  };\n\n  const connectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL,\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n\n        client.publish({\n          destination: '/app/hello',\n          body: 'begin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n\n    client.activate();\n\n\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  const reConnectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL,\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n\n        client.publish({\n          destination: '/app/hello',\n          body: 'rejoin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n\n    client.activate();\n\n\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  return (\n<>\n\n{}\n\n      <div>\n        {}\n      </div>\n\n      <div className=\" flex flex-col absolute -translate-x-1/2 left-1/2 bg-white p-3 rounded-lg\">\n        <Score fruitsMatched={fruitsMatched} />\n        <GameHelper />\n        <div className=\"w-[98%] ml-1 mb-1\">\n        <CountdownTimer\n          game={game}\n          clientRef={clientRef}\n        />\n        </div>\n        <div className=\"\">\n        <Board\n          rows={BoardOptions.BOARD_ROWS}\n          cols={BoardOptions.BOARD_COLUMNS}\n          setTracking={setTracking}\n          setFruitsMatched={setFruitsMatched}\n          gameState={game.gameState}\n          volume={volume}\n          board={board}\n          setBoard={setBoard}\n          clientRef={clientRef}\n        />\n        </div>\n\n        <div className=\"absolute text-8xl  bg-zinc-200 top-1/2 -translate-y-[50%] 0\">\n          {preStart === \"Ready\" && \"Ready?\"}\n          <WebSocketClient\n            game={game}\n            setGame={setGame}\n            startGameState={startGameState}\n            connectToGame={connectToGame}\n            reConnectToGame={reConnectToGame}\n            clientRef={clientRef}\n            board={board}\n            setBoard={setBoard}\n          />\n          {}\n          {preStart === \"Done\" && \"Game Over\"}\n        </div>\n      </div>\n\n\n      <div>\n        <div className=\"flex-col\">\n          <div>tracking:</div>\n          <div>Initial {tracking.initialCell}</div>\n          <div>Target {tracking.targetCell}</div>\n        </div>\n        <div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}>Matches: {tracking.count}</div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}># of fruits matched: {fruitsMatched}</div>\n\n        </div>\n      </div>\n\n\n      <div>\n        {game.gameState == 0 || game.gameState == 2 && (\n          <button onClick={startGame}>Start Game</button>\n        )\n        }\n      </div>\n\n      <div>\n        <Volume setVolume={setVolume} volume={volume} />\n      </div>\n\n      {game ? (\n        <div>\n          <div className='font-bold'>Websocket Data From Spring Boot:</div>\n          <div>\n            <h1>Game State: {game.gameState}</h1>\n            <p>Timer: {game.timer}</p>\n            <p>Score: {game.score}</p>\n          </div>\n        </div>\n      ) : (\n        <p>Waiting for game data...</p>\n      )}\n\n\n\n    </>\n  );\n}",
        "docstring": "",
        "type": "function_declaration",
        "start_line": 14,
        "end_line": 269,
        "tokens": 1205
      }
    ],
    "filtered_functions": []
  },
  "code_chunks": {
    "total_chunks": 12,
    "chunks": [
      {
        "type": "import_statement",
        "start_line": 1,
        "end_line": 1,
        "start_byte": 0,
        "end_byte": 52,
        "code": "import { useEffect, useRef, useState } from \"react\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 2,
        "end_line": 2,
        "start_byte": 53,
        "end_byte": 81,
        "code": "import Board from \"./Board\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 3,
        "end_line": 3,
        "start_byte": 82,
        "end_byte": 139,
        "code": "import { BoardOptions } from \"../../config/BoardOptions\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 4,
        "end_line": 4,
        "start_byte": 140,
        "end_byte": 170,
        "code": "import Volume from \"./Volume\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 5,
        "end_line": 5,
        "start_byte": 171,
        "end_byte": 219,
        "code": "import WebSocketClient from \"./WebSocketClient\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 6,
        "end_line": 6,
        "start_byte": 220,
        "end_byte": 260,
        "code": "import { Client } from \"@stomp/stompjs\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 7,
        "end_line": 7,
        "start_byte": 261,
        "end_byte": 307,
        "code": "import CountdownTimer from \"./CountdownTimer\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 8,
        "end_line": 8,
        "start_byte": 308,
        "end_byte": 336,
        "code": "import Score from \"./Score\";",
        "chunk_category": "import"
      },
      {
        "type": "import_statement",
        "start_line": 9,
        "end_line": 9,
        "start_byte": 337,
        "end_byte": 375,
        "code": "import GameHelper from \"./GameHelper\";",
        "chunk_category": "import"
      },
      {
        "type": "comment",
        "start_line": 11,
        "end_line": 11,
        "start_byte": 377,
        "end_byte": 380,
        "code": "// ",
        "chunk_category": "statement"
      },
      {
        "type": "lexical_declaration",
        "start_line": 12,
        "end_line": 12,
        "start_byte": 381,
        "end_byte": 440,
        "code": "const BROKER_URL = 'ws://localhost:8080/gs-guide-websocket'",
        "chunk_category": "statement"
      },
      {
        "type": "export_statement",
        "start_line": 14,
        "end_line": 269,
        "start_byte": 442,
        "end_byte": 7641,
        "code": "export default function GameBoardComponent() {\n\n  const clientRef = useRef(null);\n\n  const [board, setBoard] = useState([])\n\n  // const [tracking, setTracking] = useState(null);\n  const [tracking, setTracking] = useState({\n    initialCell: null,\n    targetCell: null,\n    count: 0,\n  });\n\n  const [fruitsMatched, setFruitsMatched] = useState(0)\n  const [flash, setFlash] = useState(false)\n      // 0 = not started, 1 = started, 2 = ended, 3 = preStart\n      // private int gameState;\n  const [gameState, setGameState] = useState(0)\n  const [game, setGame] = useState({\n    gameState: 0,\n    score: null,\n    timer: null\n  });\n  const [startGameState, setStartGameState] = useState(false)\n  // const [isGameActive, setIsGameActive] = useState(false)\n  const [gameEndTime, setGameEndTime] = useState(null);\n  // const [timeLeft, setTimeLeft] = useState(0);\n  const [preStart, setPreStart] = useState(\"New\")\n\n  const [volume, setVolume] = useState(0.25)\n\n  useEffect(() => {\n    if (tracking.count > 0) {\n      // Trigger the flash effect\n      setFlash(true);\n      // Remove the flash effect after 1 second\n      const timer = setTimeout(() => {\n        setFlash(false);\n      }, 200);\n\n      return () => clearTimeout(timer); // Clean up the timer\n    }\n  }, [tracking.count]);\n\n  // useEffect(() => {\n  //   if (game.gameState == 1 && gameEndTime) {\n  //     // Set initial time left\n  //     setTimeLeft(Math.max(Math.floor((gameEndTime - Date.now()) / 1000), 0));\n\n  //     // Update the countdown every second\n  //     const intervalId = setInterval(() => {\n  //       const remainingTime = Math.max(Math.floor((gameEndTime - Date.now()) / 1000), 0);\n  //       setTimeLeft(remainingTime);\n\n  //       if (remainingTime <= 0) {\n  //         clearInterval(intervalId);\n  //         endGame();\n  //       }\n  //     }, 1000);\n\n  //     // Clear interval on component unmount\n  //     return () => clearInterval(intervalId);\n  //   }\n  // }, [game.gameState, gameEndTime]);\n\n  const startGame = () => {\n    // setPreStart(\"Ready\")\n\n\n    // setTimeout(() =>{\n    //   setGameState(1);\n    //   const endTime = Date.now() + 10000; // Set the end time to 60 seconds from now\n    //   setGameEndTime(endTime);\n    //   setPreStart(\"Playing\")\n    // }, 1000)\n\n    setGame({\n      gameState: 3\n    })\n    console.log(startGameState)\n    // setTimeout(() => {\n    //   setStartGameState(false)\n    //   console.log(startGameState)\n    // }, 500)\n\n  };\n\n  const endGame = () => {\n    setGameState(2);\n    setGameEndTime(null);\n    setPreStart(\"Done\")\n  };\n\n  const connectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'begin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  const reConnectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'rejoin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  return (\n<>\n\n{/* <div className=\" bg-blue-500\">App.js</div> */}\n\n      <div>\n        {/* {gameState == 1 ? `Time Left: ${timeLeft} seconds` : 'Game Over'} */}\n      </div>\n\n      <div className=\" flex flex-col absolute -translate-x-1/2 left-1/2 bg-white p-3 rounded-lg\">\n        <Score fruitsMatched={fruitsMatched} />\n        <GameHelper />\n        <div className=\"w-[98%] ml-1 mb-1\">\n        <CountdownTimer\n          game={game}\n          clientRef={clientRef}\n        />\n        </div>\n        <div className=\"\">\n        <Board\n          rows={BoardOptions.BOARD_ROWS}\n          cols={BoardOptions.BOARD_COLUMNS}\n          setTracking={setTracking}\n          setFruitsMatched={setFruitsMatched}\n          gameState={game.gameState}\n          volume={volume}\n          board={board}\n          setBoard={setBoard}\n          clientRef={clientRef}\n        />\n        </div>\n\n        <div className=\"absolute text-8xl  bg-zinc-200 top-1/2 -translate-y-[50%] 0\">\n          {preStart === \"Ready\" && \"Ready?\"}\n          <WebSocketClient\n            game={game}\n            setGame={setGame}\n            startGameState={startGameState}\n            connectToGame={connectToGame}\n            reConnectToGame={reConnectToGame}\n            clientRef={clientRef}\n            board={board}\n            setBoard={setBoard}\n          />\n          {/* <div onClick={startGame} className=\"hover:cursor-pointer hover:bg-green-400\">{preStart === \"New\" && \"Start game\"}</div> */}\n          {preStart === \"Done\" && \"Game Over\"}\n        </div>\n      </div>\n\n\n      <div>\n        <div className=\"flex-col\">\n          <div>tracking:</div>\n          <div>Initial {tracking.initialCell}</div>\n          <div>Target {tracking.targetCell}</div>\n        </div>\n        <div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}>Matches: {tracking.count}</div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}># of fruits matched: {fruitsMatched}</div>\n\n        </div>\n      </div>\n\n\n      <div>\n        {game.gameState == 0 || game.gameState == 2 && (\n          <button onClick={startGame}>Start Game</button>\n        )\n        }\n      </div>\n\n      <div>\n        <Volume setVolume={setVolume} volume={volume} />\n      </div>\n\n      {game ? (\n        <div>\n          <div className='font-bold'>Websocket Data From Spring Boot:</div>\n          <div>\n            <h1>Game State: {game.gameState}</h1>\n            <p>Timer: {game.timer}</p>\n            <p>Score: {game.score}</p>\n          </div>\n        </div>\n      ) : (\n        <p>Waiting for game data...</p>\n      )}\n\n\n\n    </>\n  );\n}",
        "chunk_category": "export"
      }
    ],
    "methods_only": []
  },
  "imports": [
    {
      "statement": "import { useEffect, useRef, useState } from \"react\";",
      "line": 1
    },
    {
      "statement": "import Board from \"./Board\";",
      "line": 2
    },
    {
      "statement": "import { BoardOptions } from \"../../config/BoardOptions\";",
      "line": 3
    },
    {
      "statement": "import Volume from \"./Volume\";",
      "line": 4
    },
    {
      "statement": "import WebSocketClient from \"./WebSocketClient\";",
      "line": 5
    },
    {
      "statement": "import { Client } from \"@stomp/stompjs\";",
      "line": 6
    },
    {
      "statement": "import CountdownTimer from \"./CountdownTimer\";",
      "line": 7
    },
    {
      "statement": "import Score from \"./Score\";",
      "line": 8
    },
    {
      "statement": "import GameHelper from \"./GameHelper\";",
      "line": 9
    }
  ],
  "functions": [
    {
      "type": "function_declaration",
      "name": "GameBoardComponent",
      "start_line": 14,
      "end_line": 269,
      "start_byte": 457,
      "end_byte": 7641,
      "code": "function GameBoardComponent() {\n\n  const clientRef = useRef(null);\n\n  const [board, setBoard] = useState([])\n\n  // const [tracking, setTracking] = useState(null);\n  const [tracking, setTracking] = useState({\n    initialCell: null,\n    targetCell: null,\n    count: 0,\n  });\n\n  const [fruitsMatched, setFruitsMatched] = useState(0)\n  const [flash, setFlash] = useState(false)\n      // 0 = not started, 1 = started, 2 = ended, 3 = preStart\n      // private int gameState;\n  const [gameState, setGameState] = useState(0)\n  const [game, setGame] = useState({\n    gameState: 0,\n    score: null,\n    timer: null\n  });\n  const [startGameState, setStartGameState] = useState(false)\n  // const [isGameActive, setIsGameActive] = useState(false)\n  const [gameEndTime, setGameEndTime] = useState(null);\n  // const [timeLeft, setTimeLeft] = useState(0);\n  const [preStart, setPreStart] = useState(\"New\")\n\n  const [volume, setVolume] = useState(0.25)\n\n  useEffect(() => {\n    if (tracking.count > 0) {\n      // Trigger the flash effect\n      setFlash(true);\n      // Remove the flash effect after 1 second\n      const timer = setTimeout(() => {\n        setFlash(false);\n      }, 200);\n\n      return () => clearTimeout(timer); // Clean up the timer\n    }\n  }, [tracking.count]);\n\n  // useEffect(() => {\n  //   if (game.gameState == 1 && gameEndTime) {\n  //     // Set initial time left\n  //     setTimeLeft(Math.max(Math.floor((gameEndTime - Date.now()) / 1000), 0));\n\n  //     // Update the countdown every second\n  //     const intervalId = setInterval(() => {\n  //       const remainingTime = Math.max(Math.floor((gameEndTime - Date.now()) / 1000), 0);\n  //       setTimeLeft(remainingTime);\n\n  //       if (remainingTime <= 0) {\n  //         clearInterval(intervalId);\n  //         endGame();\n  //       }\n  //     }, 1000);\n\n  //     // Clear interval on component unmount\n  //     return () => clearInterval(intervalId);\n  //   }\n  // }, [game.gameState, gameEndTime]);\n\n  const startGame = () => {\n    // setPreStart(\"Ready\")\n\n\n    // setTimeout(() =>{\n    //   setGameState(1);\n    //   const endTime = Date.now() + 10000; // Set the end time to 60 seconds from now\n    //   setGameEndTime(endTime);\n    //   setPreStart(\"Playing\")\n    // }, 1000)\n\n    setGame({\n      gameState: 3\n    })\n    console.log(startGameState)\n    // setTimeout(() => {\n    //   setStartGameState(false)\n    //   console.log(startGameState)\n    // }, 500)\n\n  };\n\n  const endGame = () => {\n    setGameState(2);\n    setGameEndTime(null);\n    setPreStart(\"Done\")\n  };\n\n  const connectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'begin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  const reConnectToGame = () => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'rejoin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }\n\n  return (\n<>\n\n{/* <div className=\" bg-blue-500\">App.js</div> */}\n\n      <div>\n        {/* {gameState == 1 ? `Time Left: ${timeLeft} seconds` : 'Game Over'} */}\n      </div>\n\n      <div className=\" flex flex-col absolute -translate-x-1/2 left-1/2 bg-white p-3 rounded-lg\">\n        <Score fruitsMatched={fruitsMatched} />\n        <GameHelper />\n        <div className=\"w-[98%] ml-1 mb-1\">\n        <CountdownTimer\n          game={game}\n          clientRef={clientRef}\n        />\n        </div>\n        <div className=\"\">\n        <Board\n          rows={BoardOptions.BOARD_ROWS}\n          cols={BoardOptions.BOARD_COLUMNS}\n          setTracking={setTracking}\n          setFruitsMatched={setFruitsMatched}\n          gameState={game.gameState}\n          volume={volume}\n          board={board}\n          setBoard={setBoard}\n          clientRef={clientRef}\n        />\n        </div>\n\n        <div className=\"absolute text-8xl  bg-zinc-200 top-1/2 -translate-y-[50%] 0\">\n          {preStart === \"Ready\" && \"Ready?\"}\n          <WebSocketClient\n            game={game}\n            setGame={setGame}\n            startGameState={startGameState}\n            connectToGame={connectToGame}\n            reConnectToGame={reConnectToGame}\n            clientRef={clientRef}\n            board={board}\n            setBoard={setBoard}\n          />\n          {/* <div onClick={startGame} className=\"hover:cursor-pointer hover:bg-green-400\">{preStart === \"New\" && \"Start game\"}</div> */}\n          {preStart === \"Done\" && \"Game Over\"}\n        </div>\n      </div>\n\n\n      <div>\n        <div className=\"flex-col\">\n          <div>tracking:</div>\n          <div>Initial {tracking.initialCell}</div>\n          <div>Target {tracking.targetCell}</div>\n        </div>\n        <div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}>Matches: {tracking.count}</div>\n          <div className={`success-box ${flash ? 'flash' : ''}`}># of fruits matched: {fruitsMatched}</div>\n\n        </div>\n      </div>\n\n\n      <div>\n        {game.gameState == 0 || game.gameState == 2 && (\n          <button onClick={startGame}>Start Game</button>\n        )\n        }\n      </div>\n\n      <div>\n        <Volume setVolume={setVolume} volume={volume} />\n      </div>\n\n      {game ? (\n        <div>\n          <div className='font-bold'>Websocket Data From Spring Boot:</div>\n          <div>\n            <h1>Game State: {game.gameState}</h1>\n            <p>Timer: {game.timer}</p>\n            <p>Score: {game.score}</p>\n          </div>\n        </div>\n      ) : (\n        <p>Waiting for game data...</p>\n      )}\n\n\n\n    </>\n  );\n}"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 45,
      "end_line": 56,
      "start_byte": 1406,
      "end_byte": 1699,
      "code": "() => {\n    if (tracking.count > 0) {\n      // Trigger the flash effect\n      setFlash(true);\n      // Remove the flash effect after 1 second\n      const timer = setTimeout(() => {\n        setFlash(false);\n      }, 200);\n\n      return () => clearTimeout(timer); // Clean up the timer\n    }\n  }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 50,
      "end_line": 52,
      "start_byte": 1579,
      "end_byte": 1619,
      "code": "() => {\n        setFlash(false);\n      }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 54,
      "end_line": 54,
      "start_byte": 1641,
      "end_byte": 1666,
      "code": "() => clearTimeout(timer)"
    },
    {
      "type": "arrow_function",
      "name": "startGame",
      "start_line": 79,
      "end_line": 99,
      "start_byte": 2438,
      "end_byte": 2886,
      "code": "() => {\n    // setPreStart(\"Ready\")\n\n\n    // setTimeout(() =>{\n    //   setGameState(1);\n    //   const endTime = Date.now() + 10000; // Set the end time to 60 seconds from now\n    //   setGameEndTime(endTime);\n    //   setPreStart(\"Playing\")\n    // }, 1000)\n\n    setGame({\n      gameState: 3\n    })\n    console.log(startGameState)\n    // setTimeout(() => {\n    //   setStartGameState(false)\n    //   console.log(startGameState)\n    // }, 500)\n\n  }"
    },
    {
      "type": "arrow_function",
      "name": "endGame",
      "start_line": 101,
      "end_line": 105,
      "start_byte": 2907,
      "end_byte": 2989,
      "code": "() => {\n    setGameState(2);\n    setGameEndTime(null);\n    setPreStart(\"Done\")\n  }"
    },
    {
      "type": "arrow_function",
      "name": "connectToGame",
      "start_line": 107,
      "end_line": 140,
      "start_byte": 3016,
      "end_byte": 4018,
      "code": "() => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'begin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 111,
      "end_line": 126,
      "start_byte": 3170,
      "end_byte": 3695,
      "code": "() => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'begin',\n        });\n      }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 115,
      "end_line": 119,
      "start_byte": 3318,
      "end_byte": 3468,
      "code": "(message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 127,
      "end_line": 130,
      "start_byte": 3717,
      "end_byte": 3874,
      "code": "(frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 137,
      "end_line": 139,
      "start_byte": 3973,
      "end_byte": 4013,
      "code": "() => {\n      client.deactivate();\n    }"
    },
    {
      "type": "arrow_function",
      "name": "reConnectToGame",
      "start_line": 142,
      "end_line": 175,
      "start_byte": 4046,
      "end_byte": 5049,
      "code": "() => {\n    const client = new Client({\n      brokerURL: BROKER_URL, // Replace with your WebSocket endpoint\n      reconnectDelay: 1000,\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'rejoin',\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n    });\n\n    // Activate the client\n    client.activate();\n\n    // Cleanup on unmount\n    return () => {\n      client.deactivate();\n    };\n  }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 146,
      "end_line": 161,
      "start_byte": 4200,
      "end_byte": 4726,
      "code": "() => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the /topic/game destination\n        client.subscribe('/topic/game', (message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        });\n\n        // Send the \"begin\" message to /app/hello\n        client.publish({\n          destination: '/app/hello', // Matches the @MessageMapping(\"/hello\") in your Spring controller\n          body: 'rejoin',\n        });\n      }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 150,
      "end_line": 154,
      "start_byte": 4348,
      "end_byte": 4498,
      "code": "(message) => {\n          const receivedGame = JSON.parse(message.body);\n          console.log(receivedGame)\n          setGame(receivedGame);\n        }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 162,
      "end_line": 165,
      "start_byte": 4748,
      "end_byte": 4905,
      "code": "(frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      }"
    },
    {
      "type": "arrow_function",
      "name": "anonymous",
      "start_line": 172,
      "end_line": 174,
      "start_byte": 5004,
      "end_byte": 5044,
      "code": "() => {\n      client.deactivate();\n    }"
    }
  ],
  "variables": [],
  "react_component": {
    "component_name": "GameBoardComponent",
    "hooks": [
      {
        "name": "useRef",
        "line": 16
      },
      {
        "name": "useState",
        "line": 18
      },
      {
        "name": "useState",
        "line": 21
      },
      {
        "name": "useState",
        "line": 27
      },
      {
        "name": "useState",
        "line": 28
      },
      {
        "name": "useState",
        "line": 31
      },
      {
        "name": "useState",
        "line": 32
      },
      {
        "name": "useState",
        "line": 37
      },
      {
        "name": "useState",
        "line": 39
      },
      {
        "name": "useState",
        "line": 41
      },
      {
        "name": "useState",
        "line": 43
      },
      {
        "name": "useEffect",
        "line": 45
      }
    ],
    "jsx_elements": [
      {
        "tag": ">",
        "line": 178
      },
      {
        "tag": "div",
        "line": 182
      },
      {
        "tag": "div",
        "line": 186
      },
      {
        "tag": "div",
        "line": 189
      },
      {
        "tag": "div",
        "line": 195
      },
      {
        "tag": "div",
        "line": 209
      },
      {
        "tag": "div",
        "line": 227
      },
      {
        "tag": "div",
        "line": 228
      },
      {
        "tag": "div",
        "line": 229
      },
      {
        "tag": "div",
        "line": 230
      },
      {
        "tag": "div",
        "line": 231
      },
      {
        "tag": "div",
        "line": 233
      },
      {
        "tag": "div",
        "line": 234
      },
      {
        "tag": "div",
        "line": 235
      },
      {
        "tag": "div",
        "line": 241
      },
      {
        "tag": "button",
        "line": 243
      },
      {
        "tag": "div",
        "line": 248
      },
      {
        "tag": "div",
        "line": 253
      },
      {
        "tag": "div",
        "line": 254
      },
      {
        "tag": "div",
        "line": 255
      },
      {
        "tag": "h1",
        "line": 256
      },
      {
        "tag": "p",
        "line": 257
      },
      {
        "tag": "p",
        "line": 258
      },
      {
        "tag": "p",
        "line": 262
      }
    ],
    "jsx_element_counts": {
      ">": 1,
      "div": 18,
      "button": 1,
      "h1": 1,
      "p": 3
    },
    "total_hooks": 12,
    "total_jsx_elements": 24
  },
  "summary": {
    "total_imports": 9,
    "total_functions": 16,
    "total_variables": 0,
    "total_hooks": 12,
    "unique_jsx_elements": 5,
    "total_code_chunks": 12,
    "function_chunks": 0,
    "codesearchnet_functions": 1,
    "functions_under_token_limit": 0
  }
}